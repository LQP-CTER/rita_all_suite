document.addEventListener('DOMContentLoaded', () => {
    const chatThread = document.getElementById('chat-container');
    const chatForm = document.getElementById('chat-form');
    const userInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const refreshChatBtn = document.getElementById('refresh-btn');
    const uploadBtn = document.getElementById('upload-btn');
    const fileInput = document.getElementById('file-input');
    const fileInfoContainer = document.getElementById('file-info-container');
    const promptChips = Array.from(document.querySelectorAll('.prompt-chip'));

    const MAX_FILES = 5;
    const MAX_FILE_SIZE_MB = 10;

    let attachedFiles = [];

    function syncSendButtonState() {
        if (!sendBtn || !userInput) return;
        sendBtn.disabled = userInput.value.trim().length === 0 && attachedFiles.length === 0;
    }

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    function scrollToBottom() {
        if (chatThread) {
            chatThread.scrollTop = chatThread.scrollHeight;
        }
    }

    function escapeHTML(str) {
        const temp = document.createElement('div');
        temp.textContent = str;
        return temp.innerHTML;
    }

    function removePlaceholder() {
        if (!chatThread) return;
        const placeholder = chatThread.querySelector('.chat-placeholder');
        if (placeholder) {
            placeholder.remove();
        }
    }

    function createPlaceholder() {
        const wrapper = document.createElement('div');
        wrapper.className = 'chat-placeholder';
        wrapper.innerHTML = `
            <div class="placeholder-icon">
                <i class="fas fa-comment-dots"></i>
            </div>
            <h3>Start a smart conversation</h3>
            <p>Share a question, drop files for deeper context, or tap a quick prompt. Rita is ready when you are.</p>
        `;
        return wrapper;
    }

    function ensurePlaceholder() {
        if (!chatThread) return;
        const hasMessages = chatThread.querySelector('.message');
        const hasPlaceholder = chatThread.querySelector('.chat-placeholder');
        if (!hasMessages && !hasPlaceholder) {
            chatThread.appendChild(createPlaceholder());
        }
    }

    function addMessageToUI({ role, content, isThinking = false }) {
        if (!chatThread) return null;

        removePlaceholder();

        const messageClass = role === 'user' ? 'user' : 'rita';
        const avatarHTML = messageClass === 'user'
            ? `<svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="#e0e0e0" viewBox="0 0 16 16"><path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"/></svg>`
            : `<img src="https://res.cloudinary.com/dd7gti2kn/image/upload/v1752353858/Rita_logo__gjytjk.png" alt="Rita">`;

        const messageEl = document.createElement('article');
        messageEl.className = `message ${messageClass}`;
        messageEl.innerHTML = `
            <div class="message-avatar">${avatarHTML}</div>
            <div class="message-content">
                <p>${escapeHTML(content).replace(/\n/g, '<br>')}</p>
            </div>
        `;

        if (isThinking) {
            messageEl.id = 'thinking-indicator';
            messageEl.setAttribute('aria-live', 'polite');
        }

        chatThread.appendChild(messageEl);
        scrollToBottom();
        return messageEl;
    }

    function updateFileInfoDisplay() {
        if (!fileInfoContainer) return;

        fileInfoContainer.innerHTML = '';
        if (attachedFiles.length === 0) {
            fileInfoContainer.style.display = 'none';
        } else {
            fileInfoContainer.style.display = 'flex';
            attachedFiles.forEach((file, index) => {
                const item = document.createElement('div');
                item.className = 'file-info-item';

                const nameSpan = document.createElement('span');
                nameSpan.textContent = file.name;
                item.appendChild(nameSpan);

                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'remove-file-btn';
                removeBtn.innerHTML = '&times;';
                removeBtn.title = 'Remove file';
                removeBtn.addEventListener('click', () => {
                    attachedFiles.splice(index, 1);
                    updateFileInfoDisplay();
                    syncSendButtonState();
                });

                item.appendChild(removeBtn);
                fileInfoContainer.appendChild(item);
            });
        }
    }

    function resetFileSelection() {
        attachedFiles = [];
        updateFileInfoDisplay();
        if (fileInput) {
            fileInput.value = '';
        }
        syncSendButtonState();
    }

    function validateAndStoreFiles(fileList) {
        if (!fileList || fileList.length === 0) {
            return;
        }

        const tooManyFiles = attachedFiles.length + fileList.length > MAX_FILES;
        const accepted = [];
        let rejectedMessages = [];

        Array.from(fileList).forEach(file => {
            if (attachedFiles.length + accepted.length >= MAX_FILES) {
                rejectedMessages.push(`Only ${MAX_FILES} files are allowed per chat turn.`);
                return;
            }
            if (file.size > MAX_FILE_SIZE_MB * 1024 * 1024) {
                rejectedMessages.push(`${file.name} is above ${MAX_FILE_SIZE_MB} MB.`);
                return;
            }
            accepted.push(file);
        });

        if (accepted.length) {
            attachedFiles = attachedFiles.concat(accepted);
            updateFileInfoDisplay();
            syncSendButtonState();
        }

        if (tooManyFiles || rejectedMessages.length) {
            const message = rejectedMessages.length ? rejectedMessages.join('\n') : `Only ${MAX_FILES} files are allowed per chat turn.`;
            window.alert(message);
        }
    }

    async function handleFormSubmit(event) {
        event.preventDefault();
        const message = userInput.value.trim();
        if (!message && attachedFiles.length === 0) {
            return;
        }

        const userPreview = message || `Sent ${attachedFiles.length} file${attachedFiles.length > 1 ? 's' : ''}.`;
        addMessageToUI({ role: 'user', content: userPreview });

        const formData = new FormData();
        formData.append('message', message);

        const csrfInput = chatForm.querySelector('[name=csrfmiddlewaretoken]');
        if (csrfInput) {
            formData.append('csrfmiddlewaretoken', csrfInput.value);
        } else {
            formData.append('csrfmiddlewaretoken', getCookie('csrftoken'));
        }

        attachedFiles.forEach(file => formData.append('files', file));

        userInput.value = '';
        userInput.dispatchEvent(new Event('input'));
        resetFileSelection();

        const thinkingIndicator = addMessageToUI({ role: 'assistant', content: 'Rita is thinking...', isThinking: true });

        try {
            const response = await fetch(chatForm.action || '/api/chat/', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (thinkingIndicator) thinkingIndicator.remove();

            if (!response.ok || data.error) {
                throw new Error(data.error || 'An unknown server error occurred.');
            }

            const assistantReply = data.response || data.answer || "Sorry, I couldn't get a response.";
            addMessageToUI({ role: 'assistant', content: assistantReply });
        } catch (error) {
            console.error('Error sending message:', error);
            if (thinkingIndicator) thinkingIndicator.remove();
            addMessageToUI({ role: 'assistant', content: `Sorry, an error occurred: ${error.message}` });
        }
    }

    async function handleRefreshChat() {
        const confirmed = window.confirm('Start a brand new chat session? All history in this view will be cleared.');
        if (!confirmed) {
            return;
        }

        try {
            const response = await fetch('/api/chat/refresh/', {
                method: 'POST',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken'),
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            if (!response.ok || data.status !== 'success') {
                throw new Error(data.message || 'Failed to refresh chat.');
            }

            if (chatThread) {
                chatThread.innerHTML = '';
                chatThread.appendChild(createPlaceholder());
            }
            if (userInput) {
                userInput.value = '';
                userInput.dispatchEvent(new Event('input'));
                userInput.focus();
            }
            resetFileSelection();
        } catch (error) {
            console.error('Error refreshing chat:', error);
            window.alert(`Could not refresh chat: ${error.message}`);
        }
    }

    if (chatForm) {
        chatForm.addEventListener('submit', handleFormSubmit);
    }

    if (refreshChatBtn) {
        refreshChatBtn.addEventListener('click', handleRefreshChat);
    }

    if (uploadBtn && fileInput) {
        uploadBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', () => {
            validateAndStoreFiles(fileInput.files);
            fileInput.value = '';
        });
    }

    if (userInput && sendBtn) {
        userInput.addEventListener('input', () => {
            userInput.style.height = 'auto';
            userInput.style.height = `${userInput.scrollHeight}px`;
            syncSendButtonState();
        });

        userInput.addEventListener('keydown', event => {
            if (event.key === 'Enter' && !event.shiftKey && !sendBtn.disabled) {
                event.preventDefault();
                chatForm.requestSubmit();
            }
        });
    }

    if (promptChips.length && userInput) {
        promptChips.forEach(chip => {
            chip.addEventListener('click', () => {
                const prompt = chip.dataset.prompt || chip.textContent.trim();
                userInput.value = prompt;
                userInput.focus();
                userInput.dispatchEvent(new Event('input'));
            });
        });
    }

    ensurePlaceholder();
    scrollToBottom();
    if (userInput) {
        userInput.dispatchEvent(new Event('input'));
    }
});